stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

# Lint Jobs
lint_backend:
  stage: lint
  image: golang:1.22-alpine
  script:
    - cd toDo
    - go fmt ./...
    - go vet ./...

lint_frontend:
  stage: lint
  image: node:18-alpine
  script:
    - cd todo-frontend
    - npm ci
    - npm run lint || echo "Linting skipped or not configured"

# Test Jobs
test_backend:
  stage: test
  image: golang:1.22-alpine
  script:
    - cd toDo
    - go test ./...

test_frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd todo-frontend
    - npm ci
    - npm test -- --watchAll=false || echo "Frontend tests not set up"

# Build & Push
build_backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA ./toDo
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
  only:
    - main

build_frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA ./todo-frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
  only:
    - main

# Deploy Example
deploy_job:
  stage: deploy
  script:
    - echo "Deploying backend and frontend..."
  only:
    - main
